import asyncio
import aiohttp
from web3 import AsyncWeb3
from telebot import TeleBot
import config
import logging
from typing import Optional
import datetime

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
bot = TeleBot(config.TELEGRAM_TOKEN)


evm_web3_clients = {
    name: AsyncWeb3(AsyncWeb3.AsyncHTTPProvider(details["url"]))
    for name, details in config.NETWORKS.items() if details["type"] == "evm"
}

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω ---

async def get_gas_price_evm(network_name: str) -> Optional[float]:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç —Ü–µ–Ω—É –≥–∞–∑–∞ –¥–ª—è EVM-—Å–æ–≤–º–µ—Å—Ç–∏–º–æ–π —Å–µ—Ç–∏."""
    try:
        w3 = evm_web3_clients[network_name]
        gas_price_wei = await w3.eth.gas_price
        return round(gas_price_wei / 10**9, 3)
    except Exception as e:
        logging.error(f"Could not fetch gas price for {network_name}: {e}")
        return None

async def get_gas_price_starknet() -> Optional[float]:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç —Ü–µ–Ω—É –≥–∞–∑–∞ –¥–ª—è StarkNet –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º."""
    url = config.NETWORKS["STARKNET"]["url"]
    payload = {
        "jsonrpc": "2.0",
        "method": "starknet_getBlockWithTxHashes",
        "params": ["latest"],
        "id": 1
    }
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(url, json=payload, timeout=10) as response:
                response.raise_for_status()
                data = await response.json()
                price_in_wei_hex = data.get("result", {}).get("l1_gas_price", {}).get("price_in_wei")
                if price_in_wei_hex:
                    return round(int(price_in_wei_hex, 16) / 10**9, 3)
                logging.warning("L1 gas price not found in StarkNet response.")
                return None
    except Exception as e:
        logging.error(f"Could not fetch gas price for StarkNet: {e}")
        return None

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

def get_gas_emoji(gas_price: Optional[float]) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ü–µ–Ω—ã –Ω–∞ –≥–∞–∑."""
    if gas_price is None:
        return "‚ùì"
    if gas_price <= config.GAS_THRESHOLDS["ok"]:
        return "üü¢"
    if gas_price <= config.GAS_THRESHOLDS["warn"]:
        return "üü†"
    return "üî¥"

def format_final_message(network_prices: dict) -> str:
    """–°–æ–±–∏—Ä–∞–µ—Ç –∫—Ä–∞—Å–∏–≤–æ–µ –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–Ω–∞—Ö."""
    
    header = "üìä  <b>G A S   M O N I T O R</b>  üìä\n=====================\n"
    
    # –†–∞–∑–¥–µ–ª—è–µ–º —Å–µ—Ç–∏ –Ω–∞ —Ä–∞–±–æ—á–∏–µ –∏ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ
    l1_networks = []
    l2_networks = []
    failed_networks = []

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∏–µ —Å–µ—Ç–∏ L1, –∞ –∫–∞–∫–∏–µ L2 (–º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Ñ–∏–≥)
    l1_list = ["ETH", "STARKNET"] 

    for name, price in network_prices.items():
        if price is not None:
            line = f"{get_gas_emoji(price)} {name}: <code>{price:.3f} Gwei</code>"
            if name in l1_list:
                l1_networks.append(line)
            else:
                l2_networks.append(line)
        else:
            line = f"‚ùì {name}: <i>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö</i>"
            failed_networks.append(line)

    # –°–æ–±–∏—Ä–∞–µ–º –±–ª–æ–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    message_body = ""
    if l1_networks:
        message_body += "\n<b>L1 NETWORKS:</b>\n" + "\n".join(l1_networks) + "\n"
    
    if l2_networks:
        message_body += "\n<b>L2 NETWORKS:</b>\n" + "\n".join(l2_networks) + "\n"

    if failed_networks:
        message_body += "\n‚ö†Ô∏è <b>–ü—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–µ—Ç–∏:</b>\n" + "\n".join(failed_networks) + "\n"
        
    # –§—É—Ç–µ—Ä —Å —Ç–æ—á–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º
    current_time_utc = datetime.datetime.now(datetime.timezone.utc).strftime("%d.%m.%Y %H:%M:%S UTC")
    footer = f"=====================\n‚è∞ <code>{current_time_utc}</code>\n{config.FOOTER_TEXT}"

    return header + message_body + footer


async def send_telegram_message(message: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram, –Ω–µ –±–ª–æ–∫–∏—Ä—É—è –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫."""
    def _send():
        try:
            # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ PHOTO_PATH –≤–µ–¥–µ—Ç –∫ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω–æ–º—É –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
            with open(config.PHOTO_PATH, 'rb') as photo_file:
                bot.send_photo(
                    chat_id=config.CHAT_ID,
                    photo=photo_file,
                    caption=message,
                    parse_mode='HTML'
                )
            logging.info("Message sent successfully.")
        except Exception as e:
            logging.error(f"Failed to send Telegram message: {e}")

    loop = asyncio.get_running_loop()
    await loop.run_in_executor(None, _send)


# --- –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª (–ó–ê–ú–ï–ù–ò–¢–¨ –ß–ê–°–¢–¨ –õ–û–ì–ò–ö–ò –°–ë–û–†–ö–ò –°–û–û–ë–©–ï–ù–ò–Ø) ---

async def main():
    last_sent_time = 0
    
    while True:
        current_loop_time = asyncio.get_running_loop().time()

        # ... (–∫–æ–¥ –¥–ª—è —Å–±–æ—Ä–∞ –∑–∞–¥–∞—á –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è await asyncio.gather(...) –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–µ–º –∂–µ) ...
        tasks = []
        for name, details in config.NETWORKS.items():
            if details["type"] == "evm":
                tasks.append(get_gas_price_evm(name))
            elif details["type"] == "starknet":
                tasks.append(get_gas_price_starknet())

        results = await asyncio.gather(*tasks, return_exceptions=True)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –æ—Ç gather
        processed_results = [res if not isinstance(res, Exception) else None for res in results]
        network_prices = dict(zip(config.NETWORKS.keys(), processed_results))
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏
        if current_loop_time - last_sent_time >= config.SEND_INTERVAL_SECONDS:
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à—É –Ω–æ–≤—É—é –∫—Ä–∞—Å–∏–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            final_message = format_final_message(network_prices)
            
            await send_telegram_message(final_message)
            last_sent_time = current_loop_time

        await asyncio.sleep(config.CHECK_INTERVAL_SECONDS)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logging.info("Bot stopped by user.")